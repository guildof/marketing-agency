from google.adk.agents import LlmAgent
import os, json
from pydantic import ValidationError

from marketing_agency.schemas.audit import AuditOutput
from marketing_agency.utils.json_first import extract_first_json
from marketing_agency.utils.pdf_export import export_audit_to_pdf_and_upload
from .prompt import AUDIT_AGENT_PROMPT

MODEL = "gemini-2.5-pro"

def _postprocess_message(audit: AuditOutput, pdf_url: str | None) -> str:
    lines = []
    lines.append("### Audit digital – synthèse\n")
    lines.append(f"- **Score de maturité** : {audit.score_maturite}/100")
    if audit.quick_wins:
        lines.append(f"- **Quick wins** : " + ", ".join(audit.quick_wins))
    if audit.packs:
        packs = " · ".join([f"**{p.name}** ({(str(int(p.price_eur))+'€') if p.price_eur else 'sur devis'})" for p in audit.packs])
        lines.append(f"- **Packs recommandés** : {packs}")
    if pdf_url:
        lines.append(f"\n📄 **Rapport PDF (7 jours)** : {pdf_url}")
    lines.append("\nSouhaites-tu qu’on valide un pack et qu’on enclenche la roadmap 90 jours ?")
    return "\n".join(lines)

def _validate_and_format_audit_output(response_text: str) -> str:
    json_str = extract_first_json(response_text or "")
    if not json_str:
        return response_text
    try:
        data = json.loads(json_str)
        audit = AuditOutput(**data)
    except ValidationError as e:
        raise ValueError(f"Audit agent: JSON invalide vs schéma. Détails: {e}") from e

    client_name = os.getenv("CLIENT_NAME", "Client")
    pdf_path, url = export_audit_to_pdf_and_upload(audit.model_dump(), client_name=client_name)
    return _postprocess_message(audit, url)

audit_agent = LlmAgent(
    name="audit_agent",
    model=MODEL,
    description="Analyse la maturité digitale et propose 3 packs adaptés",
    instruction=AUDIT_AGENT_PROMPT,
    response_wrapper=_validate_and_format_audit_output,
)
